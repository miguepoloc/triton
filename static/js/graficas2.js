jQuery(document).ready(function ($) {
    class Meteogram {
        constructor(xml, container, t, h, v, p) {
            // Parallel arrays for the chart data, these are populated as the XML/JSON file
            // is loaded
            this.symbols = [];
            this.symbolNames = [];
            this.precipitations = [];
            this.windDirections = [];
            this.windDirectionNames = [];
            this.windSpeeds = [];
            this.windSpeedNames = [];
            this.temperatures = [];
            this.pressures = [];
            // Initialize
            this.xml = xml;
            this.container = container;
            this.t = t;
            this.h = h;
            this.v = v;
            this.p = p;
            // Run
            this.parseYrData();
        }
        /**
         * Callback function that is called from Highcharts on hovering each point and returns
         * HTML for the tooltip.
         */
        tooltipFormatter(tooltip) {
            // Create the header with reference to the time interval
            var index = tooltip.points[0].point.index,
                ret = '<small>' + Highcharts.dateFormat('%A, %b %e, %H:%M', tooltip.x) + '</small><br>';
            // Symbol text
            //ret += '<b>' + this.symbolNames[index] + '</b>';
            ret += '<table>';
            var v = this.v;
            // Add all series
            Highcharts.each(tooltip.points, function (point) {
                var series = point.series;
                ret += '<tr><td><span style="color:' + series.color + '">\u25CF</span> ' + series.name +
                    ': </td><td style="white-space:nowrap">' + Highcharts.pick(point.point.value, point.y)
                    .toFixed(1) +
                    series.options.tooltip.valueSuffix + '</td></tr>';
            });
            // Add wind
            /*
        ret += '<tr><td style="vertical-align: top">\u25CF Vientos</td><td style="white-space:nowrap">Dirección: ' + this.windDirections[index].toFixed(1) +
            '<br>Velocidad: ' +
            Highcharts.numberFormat(this.windSpeeds[index], 1) + ' m/s</td></tr>';
        */
            // Close
            ret += '</table>';
            return ret;
        }
        /**
         * Draw the weather symbols on top of the temperature series. The symbols are sprites of a single
         * file, defined in the getSymbolSprites function above.
         */
        drawWeatherSymbols(chart) {
            var meteogram = this;
        }
        /**
         * Create wind speed symbols for the Beaufort wind scale. The symbols are rotated
         * around the zero centerpoint.
         */
        windArrow(valor) {
            var level, path;
            // The stem and the arrow head
            path = [
                'M', 0, 7,
                'L', -1.5, 7,
                0, 10,
                1.5, 7,
                0, 7,
                0, -10 // top
            ];
            if (valor < 1) {
                level = 0;
            } else if (valor < 2) {
                level = 1;
            } else if (valor < 3) {
                level = 2;
            } else if (valor < 5) {
                level = 3;
            } else if (valor < 8) {
                level = 4;
            } else if (valor < 11) {
                level = 5;
            } else if (valor < 14) {
                level = 6;
            } else if (valor < 17) {
                level = 7;
            } else if (valor < 21) {
                level = 8;
            } else if (valor < 24) {
                level = 9;
            } else if (valor < 28) {
                level = 10;
            } else if (valor < 32) {
                level = 11;
            } else {
                level = 12;
            }
            if (level === 0) {
                path = [];
            }
            if (level === 2) {
                path.push('M', 0, -8, 'L', 4, -8); // short line
            } else if (level >= 3) {
                path.push(0, -10, 7, -10); // long line
            }
            if (level === 4) {
                path.push('M', 0, -7, 'L', 4, -7);
            } else if (level >= 5) {
                path.push('M', 0, -7, 'L', 7, -7);
            }
            if (level === 5) {
                path.push('M', 0, -4, 'L', 4, -4);
            } else if (level >= 6) {
                path.push('M', 0, -4, 'L', 7, -4);
            }
            if (level === 7) {
                path.push('M', 0, -1, 'L', 4, -1);
            } else if (level >= 8) {
                path.push('M', 0, -1, 'L', 7, -1);
            }
            return path;
        }
        /**
         * Draw the wind arrows. Each arrow path is generated by the windArrow function above.
         */
        drawWindArrows(chart) {
            var meteogram = this;
            $.each(chart.series[0].data, function (i, point) {
                var arrow, x, y;
                if (meteogram.resolution > 36e5 || i % 2 === 0) {
                    // Draw the wind arrows
                    x = point.plotX + chart.plotLeft + 7;
                    y = 255;
                    if (meteogram.windSpeedNames[i] === 'Calm') {
                        arrow = chart.renderer.circle(x, y, 10).attr({
                            fill: 'none'
                        });
                    } else {
                        arrow = chart.renderer.path(meteogram.windArrow(meteogram.windSpeeds[i].y)).attr({
                            rotation: parseInt(meteogram.windDirections[i], 10),
                            translateX: x,
                            translateY: y // rotation center
                        });
                    }
                    arrow.attr({
                            stroke: (Highcharts.theme && Highcharts.theme.contrastTextColor) || 'black',
                            'stroke-width': 1.5,
                            zIndex: 5
                        })
                        .add();
                }
            });
        }
        /**
         * Draw blocks around wind arrows, below the plot area
         */
        drawBlocksForWindArrows(chart) {
            var xAxis = chart.xAxis[0],
                x, pos, max, isLong, isLast, i;
            for (pos = xAxis.min, max = xAxis.max, i = 0; pos <= max + 36e5; pos += 36e5, i += 1) {
                // Get the X position
                isLast = pos === max + 36e5;
                x = Math.round(xAxis.toPixels(pos)) + (isLast ? 0.5 : -0.5);
                // Draw the vertical dividers and ticks
                if (this.resolution > 36e5) {
                    isLong = pos % this.resolution === 0;
                } else {
                    isLong = i % 2 === 0;
                }
                chart.renderer.path(['M', x, chart.plotTop + chart.plotHeight + (isLong ? 0 : 28),
                        'L', x, chart.plotTop + chart.plotHeight + 32, 'Z'
                    ])
                    .attr({
                        'stroke': chart.options.chart.plotBorderColor,
                        'stroke-width': 1
                    })
                    .add();
            }
        }
        /**
         * Get the title based on the XML data
         */
        getTitle() {
            if (this.t) {
                return "Historial Temperatura/Humedad";
            } else {
                return "Historial Vientos/Presión atmosférica";
            }
        }
        /**
         * Build and return the Highcharts options structure
         */
        getChartOptions() {
            var meteogram = this;
            var serieSel = [];
            var ySel = [];
            if (this.t) {
                serieSel.push({
                    name: 'Temperatura',
                    data: this.temperatures,
                    type: 'spline',
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    tooltip: {
                        valueSuffix: '°C'
                    },
                    zIndex: 1,
                    color: '#FF3333',
                    negativeColor: '#48AFE8'
                });
                ySel.push({
                    title: {
                        text: null
                    },
                    labels: {
                        format: '{value}°C',
                        style: {
                            fontSize: '10px'
                        },
                        x: -3
                    },
                    floor: 23,
                    ceiling: 35,
                    plotLines: [{
                        value: 0,
                        color: '#BBBBBB',
                        width: 1,
                        zIndex: 2
                    }],
                    // Custom positioner to provide even temperature ticks from top down
                    tickPositioner: function () {
                        var max = Math.ceil(this.max) + 1,
                            pos = max - 12, // start
                            ret;
                        if (pos < this.min) {
                            ret = [];
                            while (pos <= max) {
                                ret.push(pos += 1);
                            }
                        } // else return undefined and go auto
                        return ret;
                    },
                    maxPadding: 0.3,
                    tickInterval: 1,
                    gridLineColor: (Highcharts.theme && Highcharts.theme.background2) || '#F0F0F0'
                });
            }
            if (this.v) {
                serieSel.push({
                    name: 'vientos',
                    data: this.windSpeeds,
                    type: 'spline',
                    marker: {
                        enabled: false,
                        states: {
                            hover: {
                                enabled: true
                            }
                        }
                    },
                    tooltip: {
                        valueSuffix: 'm/s'
                    },
                    zIndex: 1,
                    color: '#FF3333',
                    negativeColor: '#48AFE8'
                });
                ySel.push({
                    title: {
                        text: null
                    },
                    labels: {
                        format: '{value}m/s',
                        style: {
                            fontSize: '10px'
                        },
                        x: -3
                    },
                    plotLines: [{
                        value: 0,
                        color: '#BBBBBB',
                        width: 1,
                        zIndex: 2
                    }],
                    // Custom positioner to provide even temperature ticks from top down
                    tickPositioner: function () {
                        var max = Math.ceil(this.max) + 1,
                            pos = max - 12, // start
                            ret;
                        if (pos < this.min) {
                            ret = [];
                            while (pos <= max) {
                                ret.push(pos += 1);
                            }
                        } // else return undefined and go auto
                        return ret;
                    },
                    maxPadding: 0.3,
                    tickInterval: 1,
                    gridLineColor: (Highcharts.theme && Highcharts.theme.background2) || '#F0F0F0'
                });
            }
            if (this.h) {
                serieSel.push({
                    name: 'Humedad relativa',
                    data: this.precipitations,
                    type: 'spline',
                    color: '#68CFE8',
                    yAxis: 1,
                    groupPadding: 0,
                    pointPadding: 0,
                    borderWidth: 0,
                    shadow: false,
                    tooltip: {
                        valueSuffix: '%'
                    }
                });
                ySel.push({
                    allowDecimals: true,
                    title: {
                        text: '%',
                        offset: 0,
                        align: 'high',
                        rotation: 0,
                        style: {
                            fontSize: '10px',
                            color: '#68CFE8'
                        },
                        textAlign: 'left',
                        x: 3
                    },
                    floor: 0,
                    ceiling: 80,
                    labels: {
                        style: {
                            fontSize: '8px',
                            color: '#68CFE8'
                        },
                        y: 2,
                        x: 3
                    },
                    gridLineWidth: 0,
                    tickLength: 0,
                    opposite: true,
                    showLastLabel: false
                });
            }
            if (this.p) {
                serieSel.push({
                    name: 'presion del aire',
                    data: this.pressures,
                    type: 'spline',
                    color: Highcharts.getOptions().colors[2],
                    yAxis: 1,
                    groupPadding: 0,
                    pointPadding: 0,
                    borderWidth: 0,
                    shadow: false,
                    tooltip: {
                        valueSuffix: ' mbares'
                    }
                });
                ySel.push({
                    allowDecimals: true,
                    title: {
                        text: 'mbares',
                        offset: 0,
                        align: 'high',
                        rotation: 0,
                        style: {
                            fontSize: '10px',
                            color: Highcharts.getOptions().colors[2]
                        },
                        textAlign: 'left',
                        x: 3
                    },
                    floor: 1005,
                    ceiling: 1013,
                    labels: {
                        style: {
                            fontSize: '8px',
                            color: Highcharts.getOptions().colors[2]
                        }
                    },
                    gridLineWidth: 0,
                    opposite: true,
                    showLastLabel: false
                });
            }
            return {
                chart: {
                    renderTo: this.container,
                    marginBottom: 70,
                    marginRight: 40,
                    marginTop: 50,
                    plotBorderWidth: 1,
                    /* width: 800,*/
                    height: 310
                },
                title: {
                    text: this.getTitle(),
                    align: 'left'
                },
                credits: {
                    text: 'INVEMAR',
                    href: "www.invemar.org.co",
                    position: {
                        x: -40
                    }
                },
                tooltip: {
                    shared: true,
                    useHTML: true,
                    formatter: function () {
                        return meteogram.tooltipFormatter(this);
                    }
                },
                xAxis: [{
                    type: 'datetime',
                    tickInterval: 2 * 36e5,
                    minorTickInterval: 36e5,
                    tickLength: 0,
                    gridLineWidth: 1,
                    gridLineColor: (Highcharts.theme && Highcharts.theme.background2) || '#F0F0F0',
                    startOnTick: false,
                    endOnTick: false,
                    minPadding: 0,
                    maxPadding: 0,
                    offset: 30,
                    showLastLabel: true,
                    labels: {
                        format: '{value:%H}'
                    }
                }, {
                    linkedTo: 0,
                    type: 'datetime',
                    tickInterval: 24 * 3600 * 1000,
                    labels: {
                        format: '{value:<span style="font-size: 12px; font-weight: bold">%a</span> %b %e}',
                        align: 'left',
                        x: 3,
                        y: -5
                    },
                    opposite: true,
                    tickLength: 20,
                    gridLineWidth: 1
                }],
                yAxis: ySel,
                legend: {
                    enabled: false
                },
                plotOptions: {
                    series: {
                        pointPlacement: 'between'
                    }
                },
                series: serieSel
            };
        }
        onChartLoad(chart) {
            this.drawWeatherSymbols(chart);
            if (this.v) {
                this.drawWindArrows(chart);
                this.drawBlocksForWindArrows(chart);
            }
        }
        createChart() {
            var meteogram = this;
            Highcharts.setOptions({
                global: {
                    useUTC: true,
                    timezoneOffset: 300
                },
                lang: {
                    loading: 'Cargando...',
                    months: ['Enero', 'Febrero', 'Marzo', 'Abril', 'Mayo', 'Junio', 'Julio', 'Agosto',
                        'Septiembre', 'Octubre', 'Noviembre', 'Diciembre'
                    ],
                    weekdays: ['Domingo', 'Lunes', 'Martes', 'Miércoles', 'Jueves', 'Viernes', 'Sábado'],
                    shortMonths: ['Ene', 'Feb', 'Mar', 'Abr', 'May', 'Jun', 'Jul', 'Ago', 'Sep', 'Oct',
                        'Nov', 'Dic'
                    ],
                    exportButtonTitle: "Exportar",
                    printButtonTitle: "Importar",
                    rangeSelectorFrom: "Desde",
                    rangeSelectorTo: "Hasta",
                    rangeSelectorZoom: "Periodo",
                    downloadPNG: 'Descargar imagen PNG',
                    downloadJPEG: 'Descargar imagen JPEG',
                    downloadPDF: 'Descargar imagen PDF',
                    downloadSVG: 'Descargar imagen SVG',
                    printChart: 'Imprimir',
                    resetZoom: 'Reiniciar zoom',
                    resetZoomTitle: 'Reiniciar zoom',
                    thousandsSep: ",",
                    decimalPoint: '.'
                }
            });
            this.chart = new Highcharts.Chart(this.getChartOptions(), function (chart) {
                meteogram.onChartLoad(chart);
            });
        }
        error() {
            $('#loading').html('<i class="fa fa-frown-o"></i> Failed loading data, please try again later');
        }
        parseYrData() {
            var meteogram = this,
                xml = this.xml,
                pointStart;
            $.each(xml, function (i, dato) {
                var fecha = new Date(dato.fecha).getTime();
                meteogram.temperatures.push({
                    x: fecha,
                    y: dato.temperatura
                });
                meteogram.windDirections.push(dato.direccion_viento);
                meteogram.windSpeeds.push({
                    x: fecha,
                    y: dato.velocidad_viento
                });
                meteogram.precipitations.push({
                    x: fecha,
                    y: dato.humedad_relativa
                });
                if (dato.presion != null) {
                    meteogram.pressures.push({
                        x: fecha,
                        y: dato.presion * 1000
                    });
                }
            });
            this.createChart();
        }
    }

    $.ajax({
        dataType: 'json',
        url: '/api/estacion10/',
        success: function (xml) {
            var xml_data = xml.results;
            newFunction(xml_data);
            window.meteogram = new Meteogram(xml_data, 'containerTemp', true, true, false, false);
            window.meteogram = new Meteogram(xml_data, 'containerVientos', false, false, true, true);
            var fecha = new Date(xml_data[0].fecha);
            console.log(fecha);
            $("#time").html(fecha.getFullYear() + "/" + (fecha.getMonth() + 1) + "/" + fecha.getDate() +
                " " + fecha.getHours() + ":" + fecha.getMinutes());
            $("#temp").html(xml_data[0].temperatura.toFixed(1) + "°C");
            $("#wind").html("Velocidad de viento: " + xml_data[xml_data.length - 1].velocidad_viento.toFixed(1) +
                " m/s");
        },
        error: Meteogram.prototype.error
    });
    $.ajax({
        dataType: 'json',
        url: '/datos/',
        success: function (xml) {
            console.log(xml);
            var htmlStr = "";
            for (var i = 0; i < xml.length; i++) {
                htmlStr += '<tr> <td >' + xml[i].hora + '</td>';
                htmlStr += '<td>' + xml[i].altura + '</td>' +
                    '<td>' + xml[i].mareaTexto + '</td> </tr>';
            }
            $("#tbody").html(htmlStr);
        },
        error: Meteogram.prototype.error
    });
    $.ajax({
        dataType: 'json',
        url: '/datos-horas/',
        success: function (xml) {
            var dataMareas = [];
            var horActual = [];
            var d = new Date();
            //Para el valor actual
            for (var i = 0; i < xml.length; i++) {
                dataMareas.push(xml[i].altura);
                if (d.getMinutes() - 5 < xml[i].minuto && d.getMinutes() + 5 > xml[i].minuto && d.getHours() == xml[i].hora) {
                    horActual.push(xml[i].altura);
                } else {
                    horActual.push(null);
                }
            }

            Highcharts.chart('g-mareas', {
                chart: {
                    type: 'area'
                },
                title: {
                    text: 'Nivel del mar'
                },
                xAxis: {
                    type: 'datetime'
                },
                yAxis: [{
                    title: {
                        text: 'altura (m)'
                    }
                }],
                credits: {
                    enabled: false
                },
                series: [{
                        name: 'Marea',
                        data: dataMareas,
                        pointStart: Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getDate()-1, d.getHours(), d.getSeconds()),
                        pointInterval: 60000
                    },
                    {
                        name: 'Valor actual',
                        data: horActual,
                        pointStart: Date.UTC(d.getUTCFullYear(), d.getUTCMonth(), d.getDate()-1, d.getHours(), d.getSeconds()),
                        pointInterval: 60000
                    }
                ]
            });
            console.log(d.getDate())
        },
        error: Meteogram.prototype.error
    });
});

function newFunction(xml_data) {
    console.log(xml_data);
}